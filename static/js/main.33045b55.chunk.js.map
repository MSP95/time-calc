{"version":3,"sources":["time-calc.js","App.js","serviceWorker.js","index.js"],"names":["FORMAT_STRING","TimeCalc","props","inputLabel","React","createRef","state","timeFrom","timeTo","parsedTimeFrom","parsedTimeTo","result","currentFormatString","formatStrings","labelWidth","newValue","property","this","setState","current","offsetWidth","date","Moment","isValid","customFormatString","i","length","from","parseDate","to","diff","className","Paper","TextField","id","label","value","onChange","e","onChangeHandler","target","margin","variant","fullWidth","FormControl","InputLabel","ref","htmlFor","Select","inputProps","name","MenuItem","map","s","Button","color","onClick","onClickHandler","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33045b55.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Moment from \"moment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport {Card} from \"@material-ui/core\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Paper from \"@material-ui/core/Paper\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\n//                     2019-09-19 22:38:23,920\n//                     19/10/02 17:14:15\nconst FORMAT_STRING = [\"YY/MM/DD HH:mm:ss\", \"YYYY/MM/DD HH:mm:ss\", \"hh:mm:ss\"];\n\nclass TimeCalc extends Component {\n    constructor(props) {\n        super(props);\n        this.inputLabel = React.createRef();\n        this.state = {\n            timeFrom : null,\n            timeTo : null,\n            parsedTimeFrom: null,\n            parsedTimeTo: null,\n            result: null,\n            currentFormatString: null,\n            formatStrings : [...FORMAT_STRING],\n            labelWidth: null,\n        }\n    }\n\n    onChangeHandler(newValue, property) {\n        this.setState((state) => {\n            return {[property]: newValue};\n        });\n    }\n\n    componentDidMount() {\n        this.setState({labelWidth: this.inputLabel.current.offsetWidth});\n    }\n\n\n\n\n    parseDate(date) {\n        if (Moment(date).isValid()) {\n            return Moment(date);\n        } else if (this.state.customFormatString && Moment(date, this.state.customFormatString).isValid()) {\n            return Moment(date, this.state.customFormatString);\n        } else {\n            for (let i = 0; i < FORMAT_STRING.length; i++) {\n                if (Moment(date, FORMAT_STRING[i]).isValid()) {\n                    return Moment(date, FORMAT_STRING[i]);\n                }\n            }\n        }\n    }\n\n    onClickHandler() {\n        const from = this.parseDate(this.state.timeFrom);\n        const to = this.parseDate(this.state.timeTo);\n        this.setState((state)=>{\n            return {\n                parsedTimeFrom: from,\n                parsedTimeTo: to,\n                result: to.diff(from, \"minutes\", true),\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div className={'timeCalc'}>\n                <Paper className={\"timeCalc__paper\"}>\n                <TextField\n                    id=\"outlined-name\"\n                    label=\"From\"\n                    value={this.state.timeFrom}\n                    onChange={(e)=> this.onChangeHandler(e.target.value, \"timeFrom\")}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    fullWidth\n                />\n                <br/>\n                <TextField\n                    id=\"outlined-name\"\n                    label=\"To\"\n                    value={this.state.timeTo}\n                    onChange={(e)=> this.onChangeHandler(e.target.value, \"timeTo\")}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    fullWidth\n                />\n                    <FormControl variant=\"outlined\" fullWidth>\n                        <InputLabel ref={this.inputLabel} htmlFor=\"outlined-age-simple\">\n                            Format String\n                        </InputLabel>\n                        <Select\n                            value={this.state.currentFormatString}\n                            onChange={(e)=> this.onChangeHandler(e.target.value, \"currentFormatString\")}\n                            labelWidth={this.state.labelWidth}\n                            inputProps={{\n                                name: 'Format String',\n                                id: 'outlined-age-simple',\n                            }}\n                        >\n                            <MenuItem value=\"\">\n                                <em>None</em>\n                            </MenuItem>\n                            {this.state.formatStrings.map((s)=><MenuItem value={s}>{s}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                <h1>{this.state.result !== null? this.state.result+\" minutes\": null} </h1>\n                <Button variant=\"contained\" color=\"primary\" onClick={(e)=> this.onClickHandler()}>\n                    Calculate!!!\n                </Button>\n                </Paper>\n            </div>\n        );\n    }\n\n}\n\n\nexport default TimeCalc;","import React from 'react';\nimport './App.css';\nimport TimeCalc from \"./time-calc\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <h1> Time Difference Calculator </h1>\n      <TimeCalc/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}